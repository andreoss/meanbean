package org.meanbean.util;

import java.io.Serializable;
import java.util.Random;

/**
 * Simple concrete implementation of RandomNumberGenerator.
 * 
 * @author Graham Williamson
 */
public class SimpleRandomNumberGenerator implements RandomNumberGenerator, Serializable {

    /** Unique version ID of this Serializable class. */
    private static final long serialVersionUID = 1L;

    /** The mechanism used to generate random numbers. A wrapped or adapted java.util.Random object. */
    private final Random random;

    /**
     * Construct a new Simple Random Number Generator.
     */
    public SimpleRandomNumberGenerator() {
        random = new Random();
    }

    /**
     * Generate a random byte.
     * 
     * @return A randomly generated byte, which may be positive or negative.
     */
    public byte nextByte() {
        return nextBytes(1)[0];
    }

    /**
     * Generate a random array of bytes.
     * 
     * @param size
     *            The number of bytes to generate and return. This cannot be a negative number.
     * 
     * @return An array of <i>size</i> randomly generated bytes, each of which may be positive or negative.
     * 
     * @throws IllegalArgumentException
     *             If the size parameter is deemed illegal. For example, if it is a negative number.
     */
    public byte[] nextBytes(int size) throws IllegalArgumentException {
        if (size < 0) {
            throw new IllegalArgumentException("Cannot generate a random array of bytes of negative length.");
        }
        byte[] bytes = new byte[size];
        random.nextBytes(bytes);
        return bytes;
    }

    /**
     * Generate a random int.
     * 
     * @return A randomly generated int, which may be positive or negative.
     */
    public int nextInt() {
        return random.nextInt();
    }

    /**
     * Generate a random long.
     * 
     * @return A randomly generated long, which may be positive or negative.
     */
    public long nextLong() {
        return random.nextLong();
    }

    /**
     * Generate a random float between 0.0f (inclusive) and 1.0f (exclusive).
     * 
     * @return A randomly generated float.
     */
    public float nextFloat() {
        return random.nextFloat();
    }

    /**
     * Generate a random double between 0.0d (inclusive) and 1.0d (exclusive).
     * 
     * @return A randomly generated double.
     */
    public double nextDouble() {
        return random.nextDouble();
    }

    /**
     * Generate a random boolean.
     * 
     * @return A randomly generated boolean.
     */
    public boolean nextBoolean() {
        return random.nextBoolean();
    }

}
